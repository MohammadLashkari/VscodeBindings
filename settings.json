{
  "workbench.iconTheme": "material-icon-theme",
  "workbench.colorTheme": "Default Dark+",
  "workbench.layoutControl.enabled": false,
  "window.menuBarVisibility": "compact",
  "editor.mouseWheelZoom": true,
  "editor.smoothScrolling": true,
  "editor.scrollbar.horizontal": "hidden",
  "editor.fontSize": 18.8, // 20
  "editor.cursorWidth": 3,
  "editor.bracketPairColorization.enabled": true,
  "editor.lineNumbers": "relative",
  "editor.guides.bracketPairs": "active",
  "editor.formatOnSave": true,
  "editor.formatOnType": true,
  "breadcrumbs.enabled": false,
  "editor.cursorBlinking": "expand",
  "editor.overviewRulerBorder": false,
  "editor.hideCursorInOverviewRuler": true,
  "editor.minimap.enabled": false,
  "extensions.autoUpdate": "onlyEnabledExtensions",
  "editor.parameterHints.cycle": true,
  "workbench.startupEditor": "none",
  "search.searchOnType": false,
  "window.titleBarStyle": "custom",
  "window.title": " ",
  "workbench.tree.indent": 10,
  "errorLens.fontWeight": "400",
  "json.format.keepLines": true,
  "workbench.editor.untitled.hint": "hidden",
  "explorer.compactFolders": false,
  "debug.toolBarLocation": "docked",
  "window.commandCenter": false,
  // Hide and exclude files
  "files.exclude": {
    "**/.classpath": true,
    "**/.factorypath": true,
    "**/.project": true,
    "**/.settings": true
  },
  "editor.unicodeHighlight.allowedLocales": {
    "cs": true
  },
  "activitusbar.inactiveColour": "#569CD6",
  "activitusbar.activeColour": "#569CD6",
  "activitusbar.views": [
    {
      "name": "settings",
      "codicon": "gear"
    },
    {
      "name": "explorer",
      "codicon": "explorer-view-icon"
    },
    {
      "name": "search",
      "codicon": "search-view-icon"
    },
    {
      "name": "scm",
      "codicon": "source-control-view-icon"
    },
    {
      "name": "debug",
      "codicon": "run-view-icon"
    },
    {
      "name": "workbench.view.testing",
      "codicon": "test-view-icon"
    },
    {
      "name": "extensions",
      "codicon": "extensions-view-icon"
    },
    {
      "name": "command.workbench.action.terminal.toggleTerminal",
      "codicon": "terminal"
    }
  ],
  //! python
  "python.analysis.autoImportCompletions": true,
  // "python.languageServer": "Default",
  //! QuickFix settings
  "editor.quickSuggestions": {
    "comments": "inline",
    "strings": "on",
    "other": "on"
  },
  "editor.wordBasedSuggestions": false,
  "editor.parameterHints.enabled": false,
  //! Code runner
  "code-runner.clearPreviousOutput": true,
  "code-runner.ignoreSelection": true,
  "code-runner.saveAllFilesBeforeRun": true,
  "code-runner.saveFileBeforeRun": true,
  "code-runner.fileDirectoryAsCwd": true,
  "code-runner.showExecutionMessage": false,
  "code-runner.runInTerminal": true,
  //! Terminal settings
  "terminal.integrated.profiles.windows": {
    "Cmder": {
      "path": [ "C:\\Windows\\System32\\cmd.exe" ],
      "args": [ "/k", "C:\\Users\\Acer\\cmder\\vendor\\init.bat" ]
    },
    "MyPowerShell": {
      "path": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
      "args": [ "-NoLogo" ]
    }
  },
  "terminal.integrated.fontSize": 19,
  "terminal.integrated.fontWeight": "normal",
  "terminal.integrated.lineHeight": 1.4,
  "terminal.integrated.altClickMovesCursor": false,
  "terminal.integrated.cursorBlinking": true,
  "terminal.integrated.defaultProfile.windows": "PowerShell",
  "debug.terminal.clearBeforeReusing": true,
  "terminal.integrated.enableMultiLinePasteWarning": false,
  "terminal.integrated.tabs.enabled": false,
  "terminal.integrated.shellIntegration.decorationsEnabled": "never",
  "terminal.integrated.tabs.description": " ",
  //! Dart settings
  "[dart]": {
    "editor.codeActionsOnSave": {
      // "quickfix.create.constructorForFinalFields.multi": true,
      // "quickfix.create.constructorForFinalFields": true,
      "source.organizeImports": true
    },
    "editor.rulers": [
      // 80
    ],
    "editor.selectionHighlight": false,
    "editor.suggest.snippetsPreventQuickSuggestions": false,
    "editor.suggestSelection": "first",
    "editor.tabCompletion": "off",
    "editor.wordBasedSuggestions": false,
    // show suggestons when start to type (solve enter problem)
    "editor.suggestOnTriggerCharacters": false
  },
  "dart.experimentalRefactors": true,
  "dart.debugExternalPackageLibraries": false,
  "dart.debugSdkLibraries": false,
  "dart.lineLength": 100,
  //! Flutter Settings
  // Nest files in Flutter projects
  "dart.previewFlutterUiGuides": true,
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.expand": false,
  "explorer.fileNesting.patterns": {
    "pubspec.yaml": ".flutter-plugins, .packages, .dart_tool, .flutter-plugins-dependencies, .metadata, .packages, pubspec.lock, build.yaml, analysis_options.yaml, all_lint_rules.yaml",
    ".gitignore": ".gitattributes, .gitmodules, .gitmessage, .mailmap, .git-blame*",
    "readme.*": "authors, backers.md, changelog*, citation*, code_of_conduct.md, codeowners, contributing.md, contributors, copying, credits, governance.md, history.md, license*, maintainers, readme*, security.md, sponsors.md",
    "*.dart": "$(capture).g.dart, $(capture).freezed.dart"
  },
  // Add Const Automatically
  "editor.codeActionsOnSave": {
    "source.organizeImports": true,
    "source.fixAll": true
  },
  "dart_data_class_generator.useEquatable": true,
  //! vim Settings
  "vim.leader": "<space>",
  "vim.smartcase": true,
  "vim.foldfix": true,
  "vim.highlightedyank.enable": true,
  "vim.timeout": 500,
  "vim.hlsearch": true,
  "vim.handleKeys": {
    // VS Code search in file
    "<C-f>": false,
    // Copy
    "<C-c>": false,
    // Cut
    "<C-x>": false,
    // Paste
    "<C-v>": false,
    // Undo
    "<C-z>": false,
    // Redo
    "<C-y>": false,
    // CtrlA
    "<C-a>": false
  },
  "vim.normalModeKeyBindingsNonRecursive": [
    // Fix undo ( ctrl+z )
    {
      "before": [ "u" ],
      "after": [ ],
      "commands": [ { "command": "undo", "args": [ ] } ]
    },
    {
      "before": [ "<C-r>" ],
      "after": [ ],
      "commands": [ { "command": "redo", "args": [ ] } ]
    },
    // Cut(delete) without update register
    {
      "before": [ "<leader>", "d" ],
      "after": [ "\"", "_", "d" ]
    },
    // Cut(delete) without update register
    {
      "before": [ "<leader>", "x" ],
      "after": [ "\"", "_", "x" ]
    },
    // Which key
    {
      "before": [ "<leader>", "<leader>" ],
      "commands": [ "whichkey.show" ]
    },
    // Go to error
    {
      "before": [ "g", "e" ],
      "commands": [ "editor.action.marker.nextInFiles" ]
    },
    // Save file
    {
      "before": [ "<leader>", "s" ],
      "commands": [ "workbench.action.files.save" ]
    },
    // Splits
    {
      "before": [ "leader", "v" ],
      "commands": [ ":vsplit" ]
    },
    {
      "before": [ "leader", "h" ],
      "commands": [ ":split" ]
    },
    // Show Hover
    {
      "before": [ "g", "h" ],
      "commands": [ "editor.action.showDefinitionPreviewHover" ]
    },
    // Move 1/2 screen down and center screen
    {
      "before": [ "<c-d>" ],
      "after": [ "<c-d>", "z", "z" ]
    },
    // Move 1/2 screen up and center screen
    {
      "before": [ "<c-u>" ],
      "after": [ "<c-u>", "z", "z" ]
    },
    // :nohl
    {
      "before": [ "<Escape>" ],
      "commands": [ ":nohl" ]
    },
    // Open files
    {
      "before": [ "<leader>", "f" ],
      "commands": [ "workbench.action.quickOpen" ]
    },
    // Close Window :q
    {
      "before": [ "<leader>", "w" ],
      "after": [ ":", "q", "<CR>" ]
    }
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    // Put(paste) without updating register
    {
      "before": [ "<leader>", "p" ],
      "after": [ "\"", "_", "d", "P" ]
    },
    // Cut(delete) without update register
    {
      "before": [ "<leader>", "d" ],
      "after": [ "\"", "_", "d" ]
    },
    // fix $ sign problem
    {
      "before": [ "$" ],
      "after": [ "g", "_" ]
    },
    {
      "before": [ "g", "_" ],
      "after": [ "$" ]
    },
    // Move selected lines while staying in visual mode
    {
      "before": [ "J" ],
      "commands": [ "editor.action.moveLinesDownAction" ]
    },
    { "before": [ "K" ],
      "commands": [ "editor.action.moveLinesUpAction" ]
    },
    // Comment
    {
      "before": [ "/" ],
      "commands": [ "editor.action.commentLine" ]
    }
  ],
  "vim.insertModeKeyBindings": [
    // Put semicolon to the end of line
    {
      "before": [ ";", ";" ],
      "after": [ "<Esc>", "A", ";", "<Esc>" ]
    },
    // Put equal sign (useful for creating lamda functions)
    {
      "before": [ ">", ">" ],
      "after": [ "<Esc>", "l", "a", "=", ">" ]
    },
    // Put bracket to the end of line
    {
      "before": [ "{", "{" ],
      "after": [ "<Esc>", "A", "{", "<Esc>", "l", "i", "Enter" ]
    }
  ],
  //! Which key Extention
  "whichkey.bindings": [
    {
      "key": "p",
      "name": "Command Pallette",
      "type": "command",
      "command": "workbench.action.showCommands"
    },
    {
      "key": "/",
      "name": "Comment",
      "type": "command",
      "command": "editor.action.commentLine",
      "args": "<C-/>"
    },
    {
      "key": "h",
      "name": "Hot Restart",
      "type": "command",
      "command": "flutter.hotRestart"
    },
    {
      "key": "e",
      "name": "Open Explorer",
      "type": "command",
      "command": "workbench.action.toggleSidebarVisibility"
    },
    {
      "key": "t",
      "name": "Toggle Activity Bar",
      "type": "command",
      "command": "workbench.action.toggleActivityBarVisibility"
    },
    {
      "key": "s",
      "name": "Search Files",
      "type": "command",
      "command": "search.action.openNewEditorToSide"
    },
    {
      "key": "d",
      "name": "Open Debug",
      "type": "command",
      "command": "workbench.view.debug"
    }
  ],
  //! Theme and Color
  "workbench.colorCustomizations": {
    "[Default Dark+]": {
      "editor.background": "#232323",
      "statusBar.background": "#232323",
      "statusBar.foreground": "#569CD6",
      "statusBarItem.remoteBackground": "#232323",
      "statusBarItem.remoteForeground": "#569CD6",
      "sideBar.background": "#232323",
      "activityBar.background": "#232323",
      "tab.inactiveBackground": "#2E2E2E",
      "titleBar.activeBackground": "#232323",
      "editorGroupHeader.tabsBackground": "#232323",
      "scrollbar.shadow": "#232323",
      "statusBar.debuggingBackground": "#232323",
      "terminal.ansiGreen": "#16A085",
      "terminal.ansiBrightBlue": "#569CD6"
    }
  },
  "window.zoomLevel": -0.35,
  "git.openRepositoryInParentFolders": "never",
  "workbench.activityBar.visible": false
}